1、String,StringBuffer,StringBuilder
	StringBuffer是线程安全的，它对所有方法都做了同步，StringBuilder是线程非安全的，所以在不涉及线程安全的场景，
	比如方法内部，尽量使用StringBuilder，避免同步带来的消耗。
	运行速度快慢为：StringBuilder > StringBuffer > String
	String：适用于少量的字符串操作的情况
　　   StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况
　　   StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况
2、.class和getClass()的区别
	(1)、.class用于类名，getClass()是一个final native的方法，因此用于类实例
	(2)、.class在编译期间就确定了一个类的java.lang.Class对象，但是getClass()方法在运行期间确定一个类实例的java.lang.Class对象
3、可变长度参数必须作为方法参数列表中的的最后一个参数且方法参数列表中只能有一个可变长度参数。(String... strs)
4、自动拆箱和自动装箱
	自动装箱的时候，Java虚拟机会自动调用Integer的valueOf方法；
	自动拆箱的时候，Java虚拟机会自动调用Integer的intValue方法。
	Byte、Short、Integer、Long、Char这几个装箱类的valueOf()方法是以128位分界线做了缓存的，假如是128以下且-128以上的值是会取缓存里面的引用的。
	Float、Double则不是。
5.Static静态变量
	(1)、修饰变量，方法，代码块
	(2)、static变量存放在方法区
	(3)、静态代码块在类被加载的时候执行
	(4)、静态内部类的成员变量不可以访问外部类的非静态成员和函数。
	(5)、静态导包--例如import static java.lang.system.out，可在类中直接使用导入的静态变量
6.Final关键字
	(1)、可修饰变量，方法，类
	(2)、final修饰的类不能被继承，常见的final类有:String,Integer以及其他包装类等
	(3)、final修饰的方法不能被子类重写--相对于非final方法快，因为其在编译的时候已经静态绑定了，不会在运行时动态绑定。
	(4)、final修饰的基本数据类型变量之不能改变，修饰的引用类型变量不能修改其引用，可以修改其属性值
	(5)、final修饰的变量可以安全的在多线程环境下进行共享
7.transient关键字
	(1)、一旦变量被transient修饰，该变量将不是对象持久化的一部分，变量的内容在序列化后无法获得访问。
	(2)、transient只能修饰变量，如果变量是自定义变量，类必须实现Serializable接口。
	(3)、静态变量不管是否被transient修饰，均不能被序列化。